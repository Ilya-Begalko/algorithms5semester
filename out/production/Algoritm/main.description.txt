** AVL **

АВЛ-дерево — это прежде всего двоичное дерево поиска,
ключи которого удовлетворяют стандартному свойству:
ключ любого узла дерева не меньше любого ключа в левом
поддереве данного узла и не больше любого ключа в правом поддереве этого узла.

для любого узла дерева высота его правого поддерева отличается от высоты левого поддерева не более чем на единицу.

Простой поворот выполняется при условии, что высота левого поддерева узла q больше высоты его правого поддерева: h(s)≤h(D).
Большой поворот применяется при условии h(s)>h(D) и сводится в данном случае к двум простым — сначала правый поворот вокруг q и затем левый вокруг p.

Вставка нового ключа в АВЛ-дерево выполняется, по большому счету, так же,
как это делается в простых деревьях поиска: спускаемся вниз по дереву,
выбирая правое или левое направление движения в зависимости от результата
сравнения ключа в текущем узле и вставляемого ключа. Единственное отличие
заключается в том, что при возвращении из рекурсии (т.е. после того, как ключ
вставлен либо в правое, либо в левое поддерево, и это дерево сбалансировано)
выполняется балансировка текущего узла. Строго доказывается, что возникающий
при такой вставке дисбаланс в любом узле по пути движения не превышает двух,
а значит применение вышеописанной функции балансировки является корректным.

Удаление идея следующая: находим узел p с заданным ключом k (если не находим,
то делать ничего не надо), в правом поддереве находим узел min с наименьшим
ключом и заменяем удаляемый узел p на найденный узел min.

** RBT **

Свойства красно-черных деревьев:

1) Каждый узел окрашен либо в красный, либо в черный цвет
(в структуре данных узла появляется дополнительное поле – бит цвета).
2) Корень окрашен в черный цвет.
3) Листья(так называемые NULL-узлы) окрашены в черный цвет.
4) Каждый красный узел должен иметь два черных дочерних узла.
Нужно отметить, что у черного узла могут быть черные дочерние узлы.
Красные узлы в качестве дочерних могут иметь только черные.
5) Пути от узла к его листьям должны содержать одинаковое количество черных узлов(это черная высота).

Вставка в красно-черное дерево начинается со вставки элемента,
как в обычном бинарном дереве поиска. Только здесь элементы вставляются
в позиции NULL-листьев. Вставленный узел всегда окрашивается в красный цвет.
Далее идет процедура проверки сохранения свойств красно-черного дерева.

** CODE_HUFF **

** BACKPACK **

Принцип жадного выбора

Говорят, что к оптимизационной задаче применим принцип жадного выбора (greedy choice property),
если последовательность локально оптимальных (жадных) выборов дает глобально оптимальное решение.
Различие между жадными алгоритмами и динамическим программированием можно пояснить так:
на каждом шаге жадный алгоритм берет "самый жирный кусок”, а потом уже пытается сделать
наилучший выбор среди оставшихся вариантов, каковы бы они ни были. Алгоритм динамического
программирования принимает решение, просчитав заранее последствие всех вариантов.

Стратегия  жадного  алгоритма  состоит  в  следующем:  рассчитывается  удельная  цена  вещи   ci = vi /wi.
 (Пусть имеется n вещей, каждая из которых имеет стоимость vi и вес wi.)
 Вещи сортируются в порядке убывания удельной цены.
 Первой выбирается вещь с максимальной удельной ценой,
 затем  из оставшегося множества снова выбирается вещь с максимальной ценой и т.д.
 При этом условием выбора является то, что добавляемая вещь не приводит к превышению предельного веса W.
